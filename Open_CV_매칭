#include "opencv2/features2d.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/xfeatures2d.hpp"
#include "opencv2/core.hpp"
#include <iostream>


using namespace cv;
using namespace std;
using namespace cv::xfeatures2d;

int main(void)
{
	Mat img_1 = imread("danbo.jpg", IMREAD_GRAYSCALE);
	Mat img_2 = imread("test2.jpg", IMREAD_GRAYSCALE);

	if (!img_1.data || !img_2.data)
		return -1;

	int minHessian = 400;

	Ptr<SURF> detector = SURF::create();
	detector->setHessianThreshold(minHessian);
	vector<KeyPoint> keypoints_1, keypoints_2;
	Mat descriptors_1, descriptors_2;
	detector->detectAndCompute(img_1, Mat(), keypoints_1, descriptors_1);
	detector->detectAndCompute(img_2, Mat(), keypoints_2, descriptors_2);

	FlannBasedMatcher matcher;
	vector<DMatch>matches;
	matcher.match(descriptors_1, descriptors_2, matches);
	double max_dist = 0; double min_dist = 100;

	for (int i = 0; i < descriptors_1.rows; i++){
		double dist = matches[1].distance;
		if (dist < min_dist)
			min_dist = dist;
		if (dist > max_dist)max_dist = dist;

	}

	cout << "--Max dist : " << max_dist << endl;
	cout << "--Min dist : " << min_dist << endl;

	std::vector< DMatch >  good_matches;
	for (int i = 0; i < descriptors_1.rows; i++){
		if (matches[i].distance <= max(2 * min_dist, 0.02)){
			good_matches.push_back(matches[i]);
		}
	}

	Mat img_matches;
	drawMatches(img_1, keypoints_1, img_2, keypoints_2, good_matches, img_matches, Scalar::all(-1), Scalar::all(-1), vector<char>(), DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);

	imshow("Good Matches", img_matches);
	for (int i = 0; i < (int)good_matches.size(); i++){
		cout << "--GoodMatch[" << i << "] Keypoint 1: " << good_matches[i].queryIdx << "-- Keypoint 2: " << good_matches[i].trainIdx << endl;
	}
	waitKey(0);

	return 0;
}
